using JOL.Commands;
using JOL.Interfaces;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using JOL.Classes.BlockClasses;
using JOL.Classes.MiscClasses;

namespace JOL
{
    /// <summary>
    /// This class constructs a level based on the structure generated by the level builder.
    /// </summary>

    public class Level
    {
        // Global variables
        public Player player1;
        public Player player2;
        public MultiPlayerHolder players;
        public int lives = 3, score = 0, coins = 0;
        public bool dyingAnimation;

        private static int dyingTimeMax = 180;
        private List<Portal> portals;
        private int dyingTimer = 0;

        List<IItem> items;
        List<IBlock> blocks;
        List<IEnemy> enemies;
        List<KillZone> killZones;
        HangingRope flagPole;
        InstructionOne instructionOne;
        InstructionTwo instructionTwo;
        List<BigHill> bigHills;
        List<Cloud> clouds;
        HeadsUpDisplay hud;
        IController keyboardController;
        ICamera camera;
        Game1 game;
        bool isPaused;

        // Constructor
        public Level(Player player1, Player player2, List<IItem> items, List<IBlock> blocks, List<IEnemy> enemies, List<KillZone> killZones, HangingRope flagPole, InstructionOne instructionOne, InstructionTwo instructionTwo, List<BigHill> bigHills, List<Cloud> clouds, List<Portal> portals, Game1 game, ICamera camera, HeadsUpDisplay hud)
        {
            this.player1 = player1;
            this.player2 = player2;
            this.players = new MultiPlayerHolder(player1, player2);
            this.items = items;
            this.blocks = blocks;
            this.enemies = enemies;
            this.killZones = killZones;
            this.flagPole = flagPole;
            this.bigHills = bigHills;
            this.clouds = clouds;
            this.instructionOne = instructionOne;
            this.instructionTwo = instructionTwo;
            this.portals = portals;
            this.keyboardController = new KeyboardController(new ToggleCrouchIdleJumpCommand(players), new ToggleJumpIdleCrouchCommand(players), 
                                                        new ToggleToLeftCommand(players), new ToggleToRightCommand(players), new CharacterSwitchCommand(player1, player2), new ResetCommand(player1, player2, blocks, items), 
                                                        new QuitCommand(game), new PauseCommand(this));
            this.camera = camera;
            this.game = game;
            this.hud = hud;
        }
        
        // Update is called every frame
        public void Update(GameTime gameTime)
        {
            keyboardController.Update(gameTime);

            if (!isPaused)
            {
                player1.Update(gameTime);
                player2.Update(gameTime);

                if (!dyingAnimation)
                {
                    camera.Update(gameTime);

                    for (int i = 0; i < items.Count; i++)
                    {
                        items[i].Update(gameTime);
                    }
                    for (int i = 0; i < blocks.Count; i++)
                    {
                        if (blocks[i] != null)
                        {
                            blocks[i].Update(gameTime);
                        }
                    }
                    for (int i = 0; i < enemies.Count; i++)
                    {
                        if (enemies[i] != null)
                        {
                            enemies[i].Update(gameTime);
                        }
                    }
                    foreach (Portal p in portals)
                    {
                        p.Update();
                    }

                    CollisionHandler.HandleCollisions(player1, player2, blocks, enemies, killZones,flagPole,portals,camera, items);
                }
                else
                {
                    dyingTimer++;
                    if (dyingTimer >= dyingTimeMax)
                    {
                        if (lives < 0)
                        {
                            game.gameState = GameState.Losing;
                        }
                        else
                        {
                            game.gameState = GameState.Reset;
                        }
                    }
                }


            }
        }

        // Ends the game when this is called
        public void Win()
        {
            game.Win();
        }

        // Draw the level items
        public void Draw(SpriteBatch spriteBatch)
        {
            for (int i = 0; i < bigHills.Count; i++)
            {
                bigHills[i].Draw(spriteBatch, camera);
            }
            for (int i = 0; i < clouds.Count; i++)
            {
                clouds[i].Draw(spriteBatch, camera);
            }
            for (int i = 0; i < items.Count; i++)
            {
                items[i].Draw(spriteBatch, camera);
            }
            for (int i = 0; i < blocks.Count; i++)
            {
                if (blocks[i] != null)
                {
                    blocks[i].Draw(spriteBatch, camera);
                }
            }
            for (int i = 0; i < enemies.Count; i++)
            {
                if (enemies[i] != null)
                {
                    enemies[i].Draw(spriteBatch, camera);
                }
            }
                
            if (flagPole != null)
                flagPole.Draw(spriteBatch, camera);
            if (instructionOne != null)
                instructionOne.Draw(spriteBatch, camera);
            if (instructionTwo != null)
                instructionTwo.Draw(spriteBatch, camera);

            foreach (Portal p in portals)
            {
                p.Draw(spriteBatch, camera);
            }

            player1.Draw(spriteBatch, camera);
            player2.Draw(spriteBatch, camera);

            hud.Draw(spriteBatch);
        }
        
        // Freeze everything when this is called
        public void Pause()
        {
            isPaused = !isPaused;
            if (isPaused)
            {
                game.gameState = GameState.Paused;
            }
            else
            {
                game.gameState = GameState.Playing;
            }
        }
    }
}
